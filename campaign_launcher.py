# -*- coding: utf-8 -*-
# Testing Git workflow - this is a test change
# -*- coding: utf-8 -*-

"""
Enhanced Land Acquisition Campaign Launcher with Geocoding Support
Clean interface for real estate campaigns with OneDrive integration and address enhancement

@author: Real Estate Pipeline Optimizer - Enhanced Edition
VERSION: 2.7
"""

import json
import os
import pandas as pd
from datetime import datetime
from pathlib import Path

class EnhancedLandAcquisitionCampaignLauncher:
    def __init__(self):
        self.load_config()
        
    def load_config(self):
        """Load configuration file"""
        try:
            with open('land_acquisition_config.json', 'r') as f:
                config_data = json.load(f)
                self.config = config_data.get('land_acquisition_config', {})
        except FileNotFoundError:
            print("‚ùå Configuration file not found. Please run setup first.")
            exit(1)
    
    def check_geocoding_setup(self):
        """Check if geocoding is properly configured"""
        geocoding_config = self.config.get('geocoding_settings', {})
        geocoding_enabled = geocoding_config.get('enabled', False)
        geocoding_token = geocoding_config.get('token', '')
        
        if geocoding_enabled and geocoding_token and geocoding_token != "YOUR_GEOCODING_TOKEN_HERE":
            return True, "‚úÖ ENABLED"
        elif geocoding_enabled and (not geocoding_token or geocoding_token == "YOUR_GEOCODING_TOKEN_HERE"):
            return False, "‚ùå MISSING TOKEN"
        else:
            return False, "‚ùå DISABLED"
    
    def show_welcome(self):
        """Display welcome screen with workflow context and geocoding info"""
        geocoding_enabled, geocoding_status = self.check_geocoding_setup()
        
        print("\n" + "="*80)
        print("üèóÔ∏è ENHANCED LAND ACQUISITION CAMPAIGN LAUNCHER")
        print("CP-Municipality Processing with OneDrive Team Sharing + Address Enhancement")
        print("="*80)
        print()
        print("üìä YOUR WORKFLOW:")
        print("Business Development ‚Üí You (Process) ‚Üí OneDrive ‚Üí Team (Validate) ‚Üí Mailing")
        print()
        print("üí° WHAT THIS DOES:")
        print("‚Ä¢ Splits input by CP-Municipality automatically")
        print("‚Ä¢ Processes each parcel through Italian Land Registry API")
        print("‚Ä¢ Creates 'Validation_Ready' files for Land Acquisition Team")
        print("‚Ä¢ Generates separate company files when companies are found")
        print("‚Ä¢ Saves results to OneDrive for team access")
        print("‚Ä¢ Exports Power BI data for dashboard analysis")
        print("‚Ä¢ Tracks costs with manual balance method")
        print("‚Ä¢ Supports Sezione field when provided")
        
        if geocoding_enabled:
            print("‚Ä¢ üó∫Ô∏è ENHANCES ADDRESSES with ZIP codes and coordinates")
            print("‚Ä¢ üìÆ Creates postal-ready Italian formatted addresses")
            print("‚Ä¢ üìç Adds geographic data for mapping and analysis")
        else:
            print(f"‚Ä¢ üó∫Ô∏è Address enhancement: {geocoding_status}")
            if "MISSING TOKEN" in geocoding_status:
                print("  ‚ö†Ô∏è  Configure geocoding token to enable address enhancement")
        print()
    
    def show_geocoding_benefits(self):
        """Show benefits of geocoding enhancement"""
        geocoding_enabled, geocoding_status = self.check_geocoding_setup()
        
        if geocoding_enabled:
            print("üó∫Ô∏è ADDRESS ENHANCEMENT BENEFITS:")
            print("‚Ä¢ ZIP codes for direct mailing campaigns")
            print("‚Ä¢ Properly formatted Italian postal addresses")
            print("‚Ä¢ Geographic coordinates for mapping")
            print("‚Ä¢ Province codes and administrative data")
            print("‚Ä¢ Street name and number separation")
            print("‚Ä¢ Enhanced data quality for validation team")
            print()
        else:
            print("üó∫Ô∏è ADDRESS ENHANCEMENT:")
            print(f"   Status: {geocoding_status}")
            if "MISSING TOKEN" in geocoding_status:
                print("   To enable: Add your geocoding token to land_acquisition_config.json")
                print("   Get token at: https://geocoding.openapi.it/dashboard")
                print("   Benefits: ZIP codes, coordinates, formatted addresses")
            elif "DISABLED" in geocoding_status:
                print("   To enable: Set 'enabled': true in geocoding_settings")
            print()
    
    def get_manual_cost_input(self, timing="start"):
        """Get manual balance input from user"""
        if timing == "start":
            print(f"\nüí∞ COST TRACKING - START BALANCE")
            print("Please check your API balance before starting:")
            print("1. Go to https://catasto.openapi.it/dashboard")
            print("2. Check your current account balance")
            print()
            while True:
                try:
                    balance = float(input("Enter your current balance (‚Ç¨): "))
                    return balance
                except ValueError:
                    print("‚ùå Please enter a valid number (e.g., 45.50)")
        
        else:  # end
            print(f"\nüí∞ COST TRACKING - END BALANCE")
            print("Please check your API balance after processing:")
            print("1. Go to https://catasto.openapi.it/dashboard")
            print("2. Check your current account balance")
            print()
            while True:
                try:
                    balance = float(input("Enter your current balance (‚Ç¨): "))
                    return balance
                except ValueError:
                    print("‚ùå Please enter a valid number (e.g., 32.80)")
    
    def get_input_file(self):
        """Get input file from user with improved handling"""
        print("\nüìÅ Input File Selection:")
        print("-" * 30)
        
        # Look for Excel files in current directory and common locations
        input_search_dirs = [
            '.',
            'input',
            os.path.expanduser('~/Downloads'),
            os.path.expanduser('~/Desktop')
        ]
        
        excel_files = []
        for search_dir in input_search_dirs:
            if os.path.exists(search_dir):
                files = [f for f in os.listdir(search_dir) if f.endswith('.xlsx') and not f.startswith('~')]
                excel_files.extend([(os.path.join(search_dir, f), f) for f in files])
        
        if excel_files:
            print("Available input files:")
            for i, (full_path, filename) in enumerate(excel_files, 1):
                file_size = os.path.getsize(full_path) / 1024  # KB
                print(f"{i}. {filename} ({file_size:.1f} KB)")
            
            while True:
                try:
                    choice = int(input("\nSelect input file (number) or 0 to enter path manually: "))
                    if choice == 0:
                        break
                    elif 1 <= choice <= len(excel_files):
                        return excel_files[choice-1][0]
                    else:
                        print("‚ùå Invalid choice. Please try again.")
                except ValueError:
                    print("‚ùå Please enter a valid number.")
        
        # Manual file path entry
        file_path = input("\nEnter full path to input Excel file: ").strip().strip('"')
        
        if os.path.exists(file_path) and file_path.endswith('.xlsx'):
            return file_path
        else:
            print("‚ùå File not found or not an Excel file.")
            return self.get_input_file()
    
    def analyze_input_file(self, file_path):
        """Analyze input file structure for CP-Municipality breakdown"""
        try:
            df = pd.read_excel(file_path)
            
            # Validate required columns
            required_columns = ['tipo_catasto', 'CP', 'provincia', 'comune', 'foglio', 'particella', 'Area']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                print(f"‚ùå Missing required columns: {missing_columns}")
                return None
            
            # Check for optional Sezione column
            has_sezione = 'Sezione' in df.columns
            sezione_usage = 0
            if has_sezione:
                sezione_usage = df['Sezione'].notna().sum()
                if sezione_usage > 0:
                    print(f"üìç Sezione field detected: {sezione_usage}/{len(df)} parcels have sezione data")
                    print("   ‚úÖ Sezione will be included in API calls where provided")
            
            # Analyze CP-Municipality structure
            cp_analysis = df.groupby('CP').agg({
                'comune': lambda x: list(x.unique()),
                'provincia': 'first',
                'foglio': 'count'
            }).rename(columns={'foglio': 'parcel_count'})
            
            municipality_count = df['comune'].nunique()
            total_parcels = len(df)
            
            analysis = {
                'total_parcels': total_parcels,
                'total_cps': len(cp_analysis),
                'total_municipalities': municipality_count,
                'cp_breakdown': cp_analysis.to_dict('index'),
                'has_sezione': has_sezione,
                'sezione_usage': sezione_usage,
                'dataframe': df
            }
            
            return analysis
            
        except Exception as e:
            print(f"‚ùå Error analyzing input file: {str(e)}")
            return None
    
    def display_input_analysis(self, analysis):
        """Display detailed input file analysis"""
        print(f"\nüìä INPUT FILE ANALYSIS")
        print("="*50)
        print(f"üìç Total Parcels: {analysis['total_parcels']:,}")
        print(f"üéØ Connection Points (CPs): {analysis['total_cps']}")
        print(f"üèòÔ∏è  Municipalities: {analysis['total_municipalities']}")
        
        # Show sezione information if present
        if analysis.get('has_sezione', False) and analysis.get('sezione_usage', 0) > 0:
            sezione_percentage = (analysis['sezione_usage'] / analysis['total_parcels']) * 100
            print(f"üìç Sezione Usage: {analysis['sezione_usage']}/{analysis['total_parcels']} parcels ({sezione_percentage:.1f}%)")
            print("   ‚úÖ Sezione data will be sent to API where available")
        
        # Show geocoding info
        geocoding_enabled, geocoding_status = self.check_geocoding_setup()
        if geocoding_enabled:
            print(f"üó∫Ô∏è  Address Enhancement: ‚úÖ ENABLED (ZIP codes + coordinates)")
        else:
            print(f"üó∫Ô∏è  Address Enhancement: {geocoding_status}")
        
        print()
        
        print("üìã CP-Municipality Breakdown:")
        print("-" * 40)
        for cp, details in analysis['cp_breakdown'].items():
            municipalities = ", ".join(details['comune'])
            province = details['provincia']
            parcel_count = details['parcel_count']
            
            # Show sezione info for this CP if available
            sezione_info = ""
            if analysis.get('has_sezione', False) and analysis.get('sezione_usage', 0) > 0:
                df = analysis['dataframe']
                cp_sezione_count = df[df['CP'] == cp]['Sezione'].notna().sum()
                if cp_sezione_count > 0:
                    unique_sezioni = df[df['CP'] == cp]['Sezione'].dropna().unique()
                    sezione_info = f" (Sezioni: {', '.join(map(str, unique_sezioni))})"
            
            print(f"   üéØ CP {cp} ({province}):")
            print(f"      Municipalities: {municipalities}{sezione_info}")
            print(f"      Parcels: {parcel_count:,}")
            print()
    
    def preview_onedrive_structure(self, campaign_name, analysis):
        """Preview how results will be organized in OneDrive with geocoding info"""
        onedrive_path = self.config.get('output_structure', {}).get('onedrive_sync_path', 'OneDrive\\LandAcquisition\\Campaigns')
        geocoding_enabled, _ = self.check_geocoding_setup()
        
        print(f"\nüìÅ ONEDRIVE STRUCTURE PREVIEW")
        print("="*50)
        print(f"üìÇ {onedrive_path}\\{campaign_name}\\")
        
        # Show municipality folders
        for cp, details in analysis['cp_breakdown'].items():
            for comune in details['comune']:
                municipality_key = f"{cp}_{comune.replace(' ', '_')}"
                print(f"   üìÇ {municipality_key}\\")
                if geocoding_enabled:
                    print(f"      üìÑ Validation_Ready.xlsx  ‚Üê Enhanced with ZIP codes & coordinates")
                else:
                    print(f"      üìÑ Validation_Ready.xlsx  ‚Üê For Land Acquisition Team review")
                print(f"      üìÑ Companies_Found.xlsx    ‚Üê Companies detected (if any)")
                print(f"      üìÑ {municipality_key}_Complete_Results.xlsx")
        
        print(f"   üìÑ Campaign_Summary.xlsx  ‚Üê Overview for management")
        print(f"   üìÑ PowerBI_Dataset.csv   ‚Üê For your Power BI dashboard")
        print(f"   üìÑ Enhanced_Cost_Summary.txt  ‚Üê Campaign cost breakdown")
        print()
        print("üë• TEAM ACCESS:")
        if geocoding_enabled:
            print(f"   ‚Ä¢ Land Acquisition: Reviews enhanced 'Validation_Ready.xlsx' files")
            print(f"     - ZIP codes in 'Poste_Address' column")
            print(f"     - Postal-ready addresses in 'Geocoded_Address_Italian' column")
            print(f"     - Geographic coordinates for mapping")
            print(f"   ‚Ä¢ Business Development: Reviews 'Companies_Found.xlsx' files")
            print(f"     - Company properties for B2B opportunities")
        else:
            print(f"   ‚Ä¢ Land Acquisition: Reviews 'Validation_Ready.xlsx' files")
            print(f"   ‚Ä¢ Business Development: Reviews 'Companies_Found.xlsx' files")
        print(f"   ‚Ä¢ Management: Views 'Campaign_Summary.xlsx' and Power BI")
        print(f"   ‚Ä¢ You: Use 'PowerBI_Dataset.csv' to update dashboard")
        print()
    
    def show_processing_summary(self, analysis):
        """Show processing summary with geocoding information"""
        print(f"\nüìã PROCESSING SUMMARY")
        print("="*50)
        
        parcel_count = analysis['total_parcels']
        municipality_count = analysis['total_municipalities']
        geocoding_enabled, geocoding_status = self.check_geocoding_setup()
        
        print(f"üìä Ready to Process:")
        print(f"   Total parcels: {parcel_count:,}")
        print(f"   Municipalities: {municipality_count}")
        print(f"   Cost tracking: Manual balance check (start/end)")
        
        if analysis.get('has_sezione', False) and analysis.get('sezione_usage', 0) > 0:
            print(f"   Sezione parcels: {analysis['sezione_usage']} will include Sezione in API calls")
        
        if geocoding_enabled:
            print(f"   üó∫Ô∏è  Address enhancement: ENABLED")
            print(f"      ‚Ä¢ ZIP codes will be added")
            print(f"      ‚Ä¢ Italian postal format addresses")
            print(f"      ‚Ä¢ Geographic coordinates")
            print(f"      ‚Ä¢ Administrative data (provinces, regions)")
        else:
            print(f"   üó∫Ô∏è  Address enhancement: {geocoding_status}")
        
        print()
        print(f"üìÅ Will create:")
        print(f"   ‚Ä¢ {municipality_count} municipality folders")
        if geocoding_enabled:
            print(f"   ‚Ä¢ {municipality_count} enhanced 'Validation_Ready.xlsx' files")
        else:
            print(f"   ‚Ä¢ {municipality_count} 'Validation_Ready.xlsx' files")
        print(f"   ‚Ä¢ Company files when companies are detected")
        print(f"   ‚Ä¢ 1 Power BI dataset with all metrics")
        print(f"   ‚Ä¢ 1 comprehensive campaign summary")
        print()
        
        return True
    
    def get_campaign_confirmation(self, campaign_name, analysis):
        """Get final confirmation before launching campaign"""
        geocoding_enabled, _ = self.check_geocoding_setup()
        
        print(f"\nüöÄ CAMPAIGN LAUNCH CONFIRMATION")
        print("="*60)
        print(f"Campaign Name: {campaign_name}")
        print(f"CPs: {analysis['total_cps']} | Municipalities: {analysis['total_municipalities']} | Parcels: {analysis['total_parcels']:,}")
        
        if analysis.get('has_sezione', False) and analysis.get('sezione_usage', 0) > 0:
            print(f"Sezione Support: {analysis['sezione_usage']} parcels will include Sezione in API calls")
        
        if geocoding_enabled:
            print(f"Address Enhancement: ‚úÖ ENABLED - ZIP codes and coordinates will be added")
        else:
            print(f"Address Enhancement: ‚ùå DISABLED")
        
        print()
        print("üîÑ What will happen:")
        print("   1. ‚úÖ Auto-create municipality folders")
        print("   2. üîÑ Process each municipality through Land Registry API")
        print("   3. üè¢ Separate companies from individuals automatically")
        print("   4. üßπ Generate cleaned 'Validation_Ready' sheets for individuals")
        if geocoding_enabled:
            print("   5. üó∫Ô∏è  Enhance addresses with ZIP codes and coordinates")
            print("   6. üè¢ Create 'Companies_Found.xlsx' files when applicable")
            print("   7. üìä Create Power BI dataset with all metrics")
            print("   8. üìã Generate comprehensive campaign dashboard")
            print("   9. üìÅ Copy results to OneDrive for team access")
        else:
            print("   5. üè¢ Create 'Companies_Found.xlsx' files when applicable")
            print("   6. üìä Create Power BI dataset")
            print("   7. üìã Generate campaign dashboard")
            print("   8. üìÅ Copy results to OneDrive for team access")
        print()
        
        while True:
            confirm = input("üöÄ Launch campaign? (y/n): ").lower().strip()
            if confirm in ['y', 'yes']:
                return True
            elif confirm in ['n', 'no']:
                return False
            else:
                print("Please enter 'y' or 'n'")
    
    def generate_campaign_name(self, analysis):
        """Generate unique campaign name"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        
        # Include main CPs in name for clarity
        main_cps = list(analysis['cp_breakdown'].keys())[:2]  # First 2 CPs
        cp_suffix = "_".join(main_cps).replace(' ', '_')
        
        return f"LandAcquisition_{cp_suffix}_{timestamp}"
    
    def create_campaign_config(self, input_file, campaign_name, analysis):
        """Create comprehensive campaign configuration with geocoding info"""
        
        # Convert pandas/numpy types to native Python types for JSON serialization
        cp_breakdown_clean = {}
        for cp, details in analysis['cp_breakdown'].items():
            cp_breakdown_clean[str(cp)] = {
                'comune': details['comune'],  # Already a list of strings
                'provincia': str(details['provincia']),
                'parcel_count': int(details['parcel_count'])  # Convert numpy.int64 to int
            }
        
        geocoding_enabled, _ = self.check_geocoding_setup()
        
        campaign_config = {
            "campaign_name": campaign_name,
            "input_file": input_file,
            "created_date": datetime.now().isoformat(),
            "campaign_analysis": {
                "total_parcels": int(analysis['total_parcels']),
                "total_cps": int(analysis['total_cps']), 
                "total_municipalities": int(analysis['total_municipalities']),
                "cp_breakdown": cp_breakdown_clean,
                "has_sezione": bool(analysis.get('has_sezione', False)),
                "sezione_usage": int(analysis.get('sezione_usage', 0))
            },
            "processing_settings": {
                "focus_residential": True,
                "municipality_batch_size": 50,
                "validation_quality_threshold": 70,
                "api_token": self.config.get('api_settings', {}).get('token'),
                "powerbi_enabled": self.config.get('powerbi_integration', {}).get('enabled', True),
                "onedrive_enabled": self.config.get('output_structure', {}).get('auto_copy_to_onedrive', True),
                "geocoding_enabled": geocoding_enabled,
                "geocoding_token": self.config.get('geocoding_settings', {}).get('token') if geocoding_enabled else None
            },
            "expected_outputs": {
                "municipality_folders": int(analysis['total_municipalities']),
                "validation_ready_sheets": int(analysis['total_municipalities']),
                "powerbi_dataset": True,
                "campaign_dashboard": True,
                "geocoding_enhancement": geocoding_enabled
            }
        }
        
        # Save campaign config
        campaigns_dir = "campaigns"
        os.makedirs(campaigns_dir, exist_ok=True)
        config_file = os.path.join(campaigns_dir, f"{campaign_name}_config.json")
        
        with open(config_file, 'w') as f:
            json.dump(campaign_config, f, indent=4)
        
        return config_file
    
    def create_team_notification_template(self, campaign_name, analysis):
        """Create email template for notifying team with geocoding info"""
        geocoding_enabled, _ = self.check_geocoding_setup()
        
        geocoding_section = ""
        if geocoding_enabled:
            geocoding_section = """

üó∫Ô∏è NEW: ENHANCED ADDRESSES
‚Ä¢ ZIP codes added to all addresses (see 'Poste_Address' column)
‚Ä¢ Postal-ready formatted addresses (see 'Geocoded_Address_Italian' column)
‚Ä¢ Geographic coordinates for mapping
‚Ä¢ Province codes and administrative data
‚Ä¢ Focus on geocoded addresses for better mailing success"""
        
        template = f"""
üìß EMAIL TEMPLATE FOR TEAM NOTIFICATION:

Subject: Enhanced Land Acquisition Campaign Completed - {campaign_name}

Hi Team,

Campaign "{campaign_name}" has been completed and results are available in OneDrive.

üìÅ Location: OneDrive > Italy - Documentos > Origination > 1. Land > Campaigns > test_workflow > Campaigns > {campaign_name}

üìã For Land Acquisition Team:
‚Ä¢ {analysis['total_municipalities']} municipalities processed
‚Ä¢ Review "Validation_Ready.xlsx" files in each municipality folder
‚Ä¢ Focus on addresses with complete data first
‚Ä¢ Expected validation-ready records: ~{analysis['total_parcels'] // 3}
{geocoding_section}

üè¢ For Business Development Team:
‚Ä¢ Check "Companies_Found.xlsx" files in municipality folders
‚Ä¢ Contains company-owned properties for B2B opportunities
‚Ä¢ Includes company details and property information

üìä For Management:
‚Ä¢ View "Campaign_Summary.xlsx" for overview
‚Ä¢ Basic Power BI dataset available (enhanced dashboards coming soon)
‚Ä¢ Geographic data now available for mapping analysis

üí∞ Campaign Cost: Will be provided after manual balance check

üìû Questions? Contact [Your Name]

Best regards,
[Your Name]
        """
        return template.strip()
    
    def show_powerbi_next_steps(self, campaign_name):
        """Show steps to update Power BI dashboard with geocoding metrics"""
        geocoding_enabled, _ = self.check_geocoding_setup()
        
        print(f"\nüìä POWER BI NEXT STEPS")
        print("="*40)
        print("‚ö†Ô∏è  Note: Current Power BI integration is basic - future versions will include enhanced dashboards")
        print()
        print("1. üìÅ Find PowerBI_Dataset.csv in campaign folder")
        print("2. üìä Open your Land Acquisition Power BI file (or create new)")
        print("3. üîÑ Import/refresh data with new CSV")
        print("4. üìà Create basic charts with campaign metrics")
        if geocoding_enabled:
            print("5. üó∫Ô∏è  Add geocoding metrics if needed:")
            print("   ‚Ä¢ Address enhancement success rates")
            print("   ‚Ä¢ Geographic distribution (basic)")
            print("   ‚Ä¢ ZIP code coverage analysis")
        else:
            print("5. üìà Create standard metrics charts")
        print("6. üì§ Share results with management")
        print()
        print("üí° Current dataset includes:")
        print("   ‚Ä¢ Campaign progress by CP/municipality")
        print("   ‚Ä¢ Basic processing metrics")
        if geocoding_enabled:
            print("   ‚Ä¢ Geocoding success rates")
        print("   ‚Ä¢ Cost tracking")
        print()
        print("üîÆ Future enhancements will include:")
        print("   ‚Ä¢ Pre-built dashboard templates")
        print("   ‚Ä¢ Advanced geographic visualizations")
        print("   ‚Ä¢ Real-time progress tracking")
        print("   ‚Ä¢ Automated dashboard updates")
        print()
        print("üåê Strategic Direction:")
        print("   ‚Ä¢ Evolution to cloud-based web application")
        print("   ‚Ä¢ User-friendly interface for all team members")
        print("   ‚Ä¢ Enhanced collaboration and real-time features")
        print()
    
    def run(self):
        """Main launcher workflow - enhanced with geocoding support"""
        self.show_welcome()
        self.show_geocoding_benefits()
        
        # Get start balance
        start_balance = self.get_manual_cost_input("start")
        
        # Get input file and analyze structure
        input_file = self.get_input_file()
        analysis = self.analyze_input_file(input_file)
        
        if not analysis:
            print("‚ùå Unable to analyze input file. Please check file format.")
            return
        
        self.display_input_analysis(analysis)
        
        # Generate campaign name
        campaign_name = self.generate_campaign_name(analysis)
        
        # Show processing summary
        self.show_processing_summary(analysis)
        
        # Preview OneDrive structure
        self.preview_onedrive_structure(campaign_name, analysis)
        
        # Get final confirmation
        if not self.get_campaign_confirmation(campaign_name, analysis):
            print("‚ùå Campaign cancelled by user.")
            return
        
        # Create campaign configuration
        config_file = self.create_campaign_config(input_file, campaign_name, analysis)
        
        print(f"\n‚úÖ Campaign '{campaign_name}' configured successfully!")
        print(f"üìÅ Configuration: {config_file}")
        
        # Show processing instructions
        print(f"\nüöÄ TO PROCESS THE CAMPAIGN:")
        print(f"python land_acquisition_pipeline.py --config {config_file} --start-balance {start_balance}")
        print()
        print("üìä You'll be prompted for end balance when processing is complete")
        print("üí∞ Cost will be calculated automatically from balance difference")
        
        geocoding_enabled, _ = self.check_geocoding_setup()
        if geocoding_enabled:
            print("üó∫Ô∏è  Addresses will be enhanced with ZIP codes and coordinates")
        else:
            print("‚ö†Ô∏è  Address enhancement disabled - configure geocoding token to enable")
        
        # Show team notification template
        template = self.create_team_notification_template(campaign_name, analysis)
        print(f"\nüìß TEAM NOTIFICATION TEMPLATE:")
        print("-" * 40)
        print(template)
        
        # Show Power BI steps
        self.show_powerbi_next_steps(campaign_name)

def main():
    """Main function"""
    try:
        launcher = EnhancedLandAcquisitionCampaignLauncher()
        launcher.run()
                
    except KeyboardInterrupt:
        print("\n\n‚ùå Campaign launcher cancelled by user.")
    except Exception as e:
        print(f"\n‚ùå Error: {str(e)}")
        print("Please check your configuration and input file format.")

if __name__ == "__main__":
    main()